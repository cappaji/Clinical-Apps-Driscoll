*** Settings ***
Documentation     All the Keywords required to perform New Encounter form test
...
...               Dependencies:
...               ElementLocators -> EncounterFormElementLocators.
...               DataFiles -> EncounterFormCustomData.txt
Library           ExtendedSelenium2Library
Library           Collections
Library           String
Library           Process
Library           DateTime
Resource          ../DataFiles/EncounterFormCustomData.txt
Resource          ../ElementLocators/EncounterFormElementLocators.txt

*** Keywords ***
CloseNewEncounterForm
    [Documentation]    Keyword to Close the Encounter Form:
    ...
    ...    1) Select Top Window from IFrame.
    ...    2) Click on Element ${CloseEncounterFormElement}.
    Select Window
    Click Element    ${CloseEncounterFormElement}

ConsultTypeOption
    [Arguments]    ${value}
    [Documentation]    Keyword to set the Consult Type option:
    ...
    ...    1) Recieves an argument ${value} which is expected to be either Cardiology or General Surgery or Neurology or Neurosurgery.
    ...    2) Scroll Into View the element to make the element viewable for it to be accessed.
    ...    3) Click on the element by passing the ${value} text to the xpath of the elements label tag.
    Scroll Element Into View    //div[@id='ctrl_consulttype']//label[text()='${value}']
    Click Element    //div[@id='ctrl_consulttype']//label[text()='${value}']

TeleMedConsentOption
    [Arguments]    ${value}
    [Documentation]    Keyword to set the 'Parent / Guardian Consents to Tele-Medicine' option:
    ...
    ...    1) Recieves an argument ${value} which is expected to be either Yes or No.
    ...    2) Scroll Into View the element to make the element viewable for it to be accessed.
    ...    3) Click on the element by passing the ${value} text to the xpath of the elements label tag.
    Scroll Element Into View    //div[@id='ctrl_telemedicineconsent']//label[text()='${value}']
    Click Element    //div[@id='ctrl_telemedicineconsent']//label[text()='${value}']

ValidateDate
    [Arguments]    ${dateDivText}    ${DateInputID}    ${datetimepickerID}
    [Documentation]    Keyword to Validate the date field on the Encounter form:
    ...
    ...    Recieves 3 arguments-
    ...    ${dateDivText} - ID passed onto the Xpath which identifies the Date of Birth Date now graphical icon.
    ...    ${DateInputID} - ID representing the Date Text field.
    ...    ${datetimepickerID} - ID representing the 'No Future Date Allowed' error element.
    ...
    ...    1) Click on date now graphical icon of the Date of Birth text field.
    ...    2) Read the value from the Date of Birth field and store in the variable.
    ...    3) Clearing the Date of Birth field to input the new date.
    ...    4) Reading the time zone next the datetime filed on the page.
    ...    5) Calling the Keyword ReturnCurrentDate which returns the current system date based on the time zone passed.
    ...    6) Converting the date time format to date only format
    ...    7) Creating a list that has future date and the past date.
    ...    8) For each item in the list subtract the data from the current date identified from the system and collect the result in the variable ${value} by number format.
    ...    - If the value is less than 0 then the date item in the list is a Future date and we invoke InoutFutureDate&VerifyError keyword and after verifying for the error we send the past date which does not produce an error.
    ...    - If the value is greater than or equal to zero then the date item in th elist is a Past date and we invoke the InputPastDate&VerifyNoError keyword that send the past date which does not produce an error.
    ...
    Click Element    //div[@id='${dateDivText}']//following-sibling::span[2]/span
    ${CurrentdateFromApp}=    Get Value    ${DateInputID}
    log    ${CurrentdateFromApp}=
    Clear Element Text    ${DateInputID}
    ${TimeZoneText}=    Get Text    ${TimezoneElement}
    ${Date}=    ReturnCurrentDate    ${TimeZoneText}
    log    ${Date}
    ${CurrentdateFromSystem}=    Convert Date    ${Date}    result_format=%m/%d/%Y    date_format=%m/%d/%Y %H:%M
    @{DateList}=    Create List    ${FutureDate}    ${PastDate}
    : FOR    ${ListIndex}    IN    @{DateList}
    \    ${value}=    Subtract Date From Date    ${CurrentdateFromSystem}    ${ListIndex}    result_format=number    date1_format=%m/%d/%Y
    \    ...    date2_format=%m/%d/%Y
    \    Run Keyword If    ${value}<0    Run Keywords    InputFutureDate&VerifyError    ${DateInputID}    ${datetimepickerID}
    \    ...    ${FutureDate}
    \    ...    AND    InputPastDate&VerifyNoError    ${DateInputID}    ${datetimepickerID}    ${PastDate}
    \    ...    ELSE    Run Keyword    InputPastDate&VerifyNoError    ${DateInputID}    ${datetimepickerID}
    \    ...    ${PastDate}

InputFutureDate&VerifyError
    [Arguments]    ${DateInputID}    ${datetimepickerID}    ${ActualDate}
    [Documentation]    Keyword to Input the Future date and verify for the Error:
    ...
    ...    1) Recieves 3 arguments
    ...    ${DateInputID} to identify date text field,
    ...    ${datetimepickerID} to identify the Error message element
    ...    ${ActualDate} value of the date to be sent as an input.
    ...
    ...    2) Input the date using ${DateInputID} and ${ActualDate}
    ...    3) Checks if the page contains the No future date allowed error messaage by passing ${datetimepickerID} to xpath of error message element.
    Input Text    ${DateInputID}    ${ActualDate}
    Page Should Contain Element    //datetimepicker[@id='${datetimepickerID}']//span[text()='No future dates allowed.']

InputPastDate&VerifyNoError
    [Arguments]    ${DateInputID}    ${datetimepickerID}    ${ActualDate}
    [Documentation]    Keyword to Input the Past date and verify no Error is displayed:
    ...
    ...    1) Recieves 3 arguments
    ...    ${DateInputID} to identify date text field
    ...    ${datetimepickerID} to identify the Error message element
    ...    ${ActualDate} value of the date to be sent as an input.
    ...
    ...    2) Input the date using ${DateInputID} and ${ActualDate}
    ...    3) Checks if the page does not contains the No future date allowed error messaage by passing ${datetimepickerID} to xpath of error message element.
    Input Text    ${DateInputID}    ${ActualDate}
    Comment    Page Should Not Contain Element    //datetimepicker[@id='${datetimepickerID}']//span[text()='No future dates allowed.']

ValidateDate&Time
    [Arguments]    ${DateTimeDivText}    ${DateTimeInputID}    ${datetimepickerID}
    [Documentation]    Keyword to Validate the date field on the Encounter form:
    ...
    ...    Recieves 3 arguments-
    ...    ${DateTimeDivText} - ID passed onto the Xpath which identifies the Date of Birth Date now graphical icon.
    ...    ${DateTimeInputID} - ID representing the Date Text field.
    ...    ${datetimepickerID} - ID representing the 'No Future Date Allowed' error element.
    ...
    ...    1) Click on date now graphical icon of the Date Time text field.
    ...    2) Read the value from the Date Time field and store in the variable.
    ...    3) Clearing the Date Time field to input the new date.
    ...    4) Reading the time zone next the datetime filed on the page.
    ...    5) Calling the Keyword ReturnCurrentDate which returns the current system date based on the time zone passed.
    ...    6) Creating a InvalidTime1 string by adding hours to the current date time.
    ...    7) Creating a InvalidTime2 string by adding seconds to the current date time.
    ...    8) Creating a list that has future date, past date, invalidtime1 and invalidtime2.
    ...    9) For each item in the list subtract the data from the current date identified from the system and collect the result in the variable ${value} by number format.
    ...    - If the value is less than 0 then the date item in the list is a Future date and we invoke InoutFutureDate&VerifyError keyword and after verifying for the error we send the past date which does not produce an error.
    ...    - If the value is greater than or equal to zero then the date item in th elist is a Past date and we invoke the InputPastDate&VerifyNoError keyword that send the past date which does not produce an error.
    ...
    Click Element    //div[@id='${DateTimeDivText}']//following-sibling::span[2]/span
    ${CurrentDateTime}=    Get Value    ${DateTimeInputID}
    log    ${CurrentDateTime}
    Clear Element Text    ${DateTimeInputID}
    ${TimeZoneText}=    Get Text    ${TimezoneElement}
    ${CurrentDateFromSystem}=    ReturnCurrentDate    ${TimeZoneText}
    log    ${CurrentDateFromSystem}
    ${InvalidTime1}=    Add Time To Date    ${CurrentDateTime}    01:00:00    result_format=%m/%d/%Y %H:%M    date_format=%m/%d/%Y %H:%M
    ${InvalidTime2}=    Add Time To Date    ${CurrentDateTime}    00:30:00    result_format=%m/%d/%Y %H:%M    date_format=%m/%d/%Y %H:%M
    @{DateTimeList}=    Create List    ${FutureDate&Time}    ${PastDate&Time}    ${InvalidTime1}    ${InvalidTime2}
    : FOR    ${ListIndex}    IN    @{DateTimeList}
    \    ${value}=    Subtract Date From Date    ${CurrentDateFromSystem}    ${ListIndex}    result_format=number    date1_format=%m/%d/%Y %H:%M
    \    ...    date2_format=%m/%d/%Y %H:%M
    \    Run Keyword If    ${value}<0    Run Keywords    InputFutureDate&VerifyError    ${DateTimeInputID}    ${datetimepickerID}
    \    ...    ${FutureDate&time}
    \    ...    AND    InputPastDate&VerifyNoError    ${DateTimeInputID}    ${datetimepickerID}    ${PastDate&Time}
    \    ...    ELSE    Run Keyword    InputPastDate&VerifyNoError    ${DateTimeInputID}    ${datetimepickerID}
    \    ...    ${PastDate&Time}

FillNewEncounterForm
    [Documentation]    Keyword to fill and verify the New Encounter form:
    ...
    ...    1) Selecting the IFrame to work on the form elements.
    ...    2) Sending the input text for the Reason for Referral text box.
    ...    3) Selecting the location by passing the value of the Label the Select class is expecting.
    ...    4) Sending the input text for the First Name field.
    ...    5) Sending the input text for the Last Name field.
    ...    6) Invoking Select Gender keyword which select the gender radio button.
    ...    7) Sending the input text for the MRN field.
    ...    8) Sending the input for the Weight field.
    ...    9) Selecting the Weight Measure by passing the value of the Label the Select class is expecting.
    ...    10) Invoking the ValidateDate keyword to validate Date of Birth field.
    ...    11) Invoking the TeleMedConsentOption keyword which selects the ConsentOption based on the value passed.
    ...    12) Invoking the InvokingtheConsultTypeOption keyword which selects the ConsentOption based on the value passed.
    ...    13) Scroll into view the next element to make the element visible on the window and invoke.
    ...    14) Sending the input for Reference Neonatologist text filed.
    ...    15) Invoking the ValidateDate&Time keyword to validate date and time of Admission Time field.
    ...    16) Invoking the ValidateDate&Time keyword to validate date and time of Consult Time field.
    ...
    Select Frame    ${IFrameElement}
    Input Text    ${ReferralReasonElementl}    ${ReasonForReferralText}
    Select From List By Label    ${LocationLabelElement}    ${Location}
    Input Text    ${FirstNameInputElement}    ${FirstName}
    Input Text    ${LastNameInputElement}    ${LastName}
    Select Gender
    Input Text    ${MRNInputElement}    ${MRN}
    Input Text    ${WeightField_EnctrForm}    ${Weight}
    Select From List By Label    ${SelectWeightMeasureElement}    ${WeightMeasure}
    ValidateDate    ${DOBDateNowButtonElement}    ${DOBInputFieldElement}    ${DOBNoFutureDateErrorElement}
    TeleMedConsentOption    ${ConsentOption}
    ConsultTypeOption    ${ConsultType}
    Scroll Element Into View    ${RefNeonatologistElement}
    Input Text    ${RefNeonatologistElement}    ${RefNeonatologist}
    ValidateDate&Time    ${AdmisssionTimeDateTimeNowButtonElement}    ${AdmisssionTimeInputFieldElement}    ${AdmissionTimeNoFutureDateErrorElement}
    ValidateDate&Time    ${ConsultTimeDateTimeNowButtonElement}    ${ConsultTimeInputFieldElement}    ${ConsultTimeNoFutureDateErrorElement}

SelectGender
    [Documentation]    Keyword to select the Gender radio button:
    ...
    ...    1) Reads the input ${Gender} from Data File.
    ...    2) Clicks the respective radio button element based on the conditon matched in the IF ELSE block.
    log    ${Gender}
    Run Keyword If    '${Gender}' == 'Male'    Click Element    ${MaleGenderElement}
    ...    ELSE IF    '${Gender}' == 'Female'    Click Element    ${FemaleGenderElement}
    ...    ELSE IF    '${Gender}' == 'Unknown'    Click Element    ${UnknownGenderElement}

ReturnCurrentDate
    [Arguments]    ${Timezone}
    [Documentation]    Keyword which returns the current system date:
    ...
    ...    1) Recieves 1 argument ${Timezone} that containds the value of the desired timezone.
    ...    2) Gets the current system date in the required format and timezone selected
    ...    3) Assigns and return the Cureent Date ${CyrrentDate} based on the type of timezone passed as an argument.
    ${CSTDate}=    Get Current Date    UTC    -6 hours    result_format=%m/%d/%Y %H:%M
    log    ${CSTDate}
    ${ESTDate}=    Get Current Date    UTC    -5 hours    result_format=%m/%d/%Y %H:%M
    log    ${ESTDate}
    ${CurrentDate}=    Set Variable If    '${Timezone}' == 'CST'    ${CSTDate}    '${Timezone}' == 'EST'    ${ESTDate}
    [Teardown]
    [Return]    ${CurrentDate}

GoBackOnCloseFormWindow
    [Documentation]    Keyword to click on Go Back button on close form window:
    ...
    ...    1) Clicks the button Go back identified by ${GoBackButtonElement} locator.
    ...    2) Verifies the destination page after clicking Go Back button by checking for the Pediatric Encounter text on the Top Window.
    Click Button    ${GoBackButtonElement}
    Page Should Contain Element    ${PediatricEncounterTextElement}

CloseWithoutSavingOnCloseFormWindow
    [Documentation]    Keyword to click on Close Without Saving button on close form window:
    ...
    ...    1) Clicks the button Close Without Saving identified by ${CloseWithoutSavingButtonElement} locator.
    ...    2) Verifies the destination page after clicking Close Without Saving button by checking if the current window title matches the string provided.
    Click Button    ${CloseWithoutSavingButtonElement}
    ${CurrentWindowTitle}=    Get Title
    Should Be Equal As Strings    ${CurrentWindowTitle}    InTouch Clinical Apps

ClickStatProcessButton
    [Documentation]    Keyword to click on Start Process button:
    ...
    ...    1) Clicks the start process button identified by ${StartProcessButtonElement}
    ...    2)
    Click Button    ${StartProcessButtonElement}
